myf <- file.choose()
library(tidyverse)
library(igraph)
install.packages('stringr')
install.packages("stringr")
library(stringr)
emails <- read_csv("/Users/pranavprajapati/Downloads/rcode_visualization/clinton_emails/data/Emails.csv")
persons <- read_csv("/Users/pranavprajapati/Downloads/rcode_visualization/clinton_emails/data/Persons.csv")
receivers <- read_csv("/Users/pranavprajapati/Downloads/rcode_visualization/clinton_emails/data/EmailReceivers.csv")
# rename the Personid variable in receivers dataset as ReceiverID
receivers <- rename(receivers,  ReceiverId = PersonId)
# merge with the original email dataset (you can also use sqldf)
# notice that it has more observations than original emails dataset, why?
emails_joined <- left_join(emails, receivers, by = c("Id" = "EmailId"))
rm(emails) # remove original emails from enviroment
# create the edge list
emails_edge_list <- emails_joined %>% select(SenderPersonId, ReceiverId)
emails_edge_list <- emails_edge_list %>% drop_na()
email_graph <- graph.data.frame(emails_edge_list,directed=FALSE)
V(email_graph)$id <- V(email_graph)$name # retain the ids
# matching names to node Ids
V(email_graph)$name <- persons$Name[match(V(email_graph)$name, as.character(persons$Id))] # we could also use left join instead of match
V(email_graph)$name
V(email_graph)$id
# visualization
plot(email_graph, layout=layout.fruchterman.reingold(email_graph),
vertex.size=2,
vertex.label=NA, edge.arrow.size=.2)
# notice that it has more observations than original emails dataset, why?
emails_joined <- left_join(emails, receivers, by = c("Id" = "EmailId"))
rm(emails) # remove original emails from enviroment
# create the edge list
emails_edge_list <- emails_joined %>% select(SenderPersonId, ReceiverId)
emails_edge_list <- emails_edge_list %>% drop_na()
email_graph <- graph.data.frame(emails_edge_list,directed=FALSE)
V(email_graph)$id <- V(email_graph)$name # retain the ids
# matching names to node Ids
V(email_graph)$name <- persons$Name[match(V(email_graph)$name, as.character(persons$Id))] # we could also use left join instead of match
V(email_graph)$name
V(email_graph)$id
# visualization
plot(email_graph, layout=layout.fruchterman.reingold(email_graph),
vertex.size=2,
vertex.label=NA, edge.arrow.size=.2)
# descriptive stats
vcount(email_graph)
sort(degree(email_graph), decreasing = T)[1:10]
cliques(email_graph, min = 6)
maximal.cliques(email_graph, min = 6)
# President Clinton's 2-degree egocentric network
bill_egocentric <- graph.neighborhood(email_graph, order = 2,
nodes = which(V(email_graph)$name == "Bill Clinton"))[[1]]
plot(bill_egocentric)
# remove Hillary from the network
hillary_egocentric <- igraph::delete.vertices(email_graph,
which(V(email_graph)$name == "Hillary Clinton"))
hillary_egocentric <- simplify(hillary_egocentric)
vcount(hillary_egocentric)
plot(hillary_egocentric, layout=layout.fruchterman.reingold(email_graph),
vertex.size=2,
vertex.label=NA, edge.arrow.size=.2)
sort(degree(hillary_egocentric), decreasing = T)[1:10]
######### Closeness Centrality and Election-related Email ###########
# create a new variable "election_related" if election is mentioned in subject or text
emails_joined$election_related =
str_detect(tolower(emails_joined$ExtractedBodyText), "election") |
str_detect(tolower(emails_joined$MetadataSubject), "election")
# tag a node's election attribute as TRUE if it is involved in election discussion
election_receiver_sender <- emails_joined %>% filter(election_related == TRUE) %>% select(ReceiverId, SenderPersonId)
head(election_receiver_sender)
election_nodes <-
unique(unlist(election_receiver_sender))
election_names <- persons$Name[match(election_nodes, as.character(persons$Id))]
V(hillary_egocentric)$election <- V(hillary_egocentric)$name %in% election_names
V(hillary_egocentric)[V(hillary_egocentric)$election == TRUE]$color <- "red"
plot(hillary_egocentric, layout=layout.fruchterman.reingold(hillary_egocentric),
vertex.size=2,
vertex.label=NA, edge.arrow.size=.2)
closeness_centrality <- closeness(hillary_egocentric, normalized = TRUE)
# Fit a logistic regression model
logit_df <- data.frame(V(hillary_egocentric)$election, closeness_centrality)
names(logit_df) <- c("Election", "Closeness") # Rename columns
summary(glm(Election ~ Closeness, data = logit_df, family = "binomial"))
# note that we cannot make causal claim here
# high centrality -> discuss election, or discuss election -> high centrality?
######### Average (log) Length of Received Emails and Degree Centrality ########
emails_joined$email_length <- log(nchar(emails_joined$ExtractedBodyText)+1)
avg_length = emails_joined %>% group_by(ReceiverId) %>% summarise(avg_sent_length = mean(email_length))
hist(emails_joined$email_length)
V(hillary_egocentric)$avg_length <-
avg_length$avg_sent_length[match(V(hillary_egocentric)$id, as.character(avg_length$ReceiverId))]
closeness_centrality = closeness(hillary_egocentric)
# Fit a regression model
reg_df <- data.frame(V(hillary_egocentric)$avg_length, closeness_centrality)
names(reg_df) <- c("Length", "Closeness")
summary(lm(Length ~ Closeness, data = reg_df))
cor(reg_df,  use = "complete.obs")
View(emails_edge_list)
View(emails_edge_list)
n_emails <- emails_edge_list %>%
group_by(ReceiverId) %>%
summarize(sum(count))
emails_edge_list$count <- 1
V(hillary_egocentric)$n_emails <- emails_edge_list %>%
group_by(ReceiverId) %>%
summarize(sum(count))
V(hillary_egocentric)$n_emails <- emails_edge_list %>%
group_by(sum(count))
V(hillary_egocentric)$n_emails
V(hillary_egocentric)$n_emails <- 0
emails_edge_list$count <- 1
emails_edge_list$count <- 1
emails_edge_list$count[emails_edge_list$ReceiverId==80] <- 0
emails_edge_list$count[emails_edge_list$SenderPersonId==80] <- 0
final_count <- emails_edge_list %>% group_by(ReceiverId)  %>% summarise(sum(count)
final_count <- emails_edge_list %>% group_by(ReceiverId)  %>% summarise(sum(count))
final_count <- emails_edge_list  %>%
group_by(ReceiverId) %>%
summarise(sum(count))
View(final_count)
View(emails_edge_list)
View(emails_edge_list)
emails_edge_list$count <- 1
emails_edge_list$count[emails_edge_list$ReceiverId==80] <- 0
emails_edge_list$count[emails_edge_list$SenderPersonId==80] <- 0
final_count <- emails_edge_list  %>%
group_by(ReceiverId) %>%
summarise(sum(count))
View(final_count)
ultra_vlist <- data.frame(V(hillary_egocentric)$name,V(hillary_egocentric)$id)
names(ultra_vlist) <- c( "name","id")
final_count$ReceiverId <-as.character(final_count$ReceiverId)
View(ultra_vlist)
final_count$ReceiverId <-as.character(final_count$ReceiverId)
email_no <- left_join(ultra_vlist,final_count,by=c("id"="ReceiverId"))
View(email_no)
View(email_no)
View(email_no)
email_no[is.na(email_no)] <- 0
ail_no <- left_join(ultra_vlist,fcount,by=c("id"="ReceiverId"))
View(email_no)
email_no[is.na(email_no)] <- 0
V(hillary_egocentric)$n_emails <- email_no$`sum(count)`
V(hillary_egocentric)$n_emails
plot(hillary_egocentric,layout=layout.fruchterman.reingold(hillary_egocentric), vertex.size = log(V(hillary_egocentric)$n_emails + 1),
vertex.label=NA,edge.arrow.size=.2)
V(hillary_egocentric)$n_emails
plot(hillary_egocentric,layout=layout.fruchterman.reingold(hillary_egocentric),
vertex.size = log(V(hillary_egocentric)$n_emails + 1),
vertex.label=NA,edge.arrow.size=.2)
V(hillary_egocentric)$n_emails
View(f_count)
ultra_vlist <- data.frame(V(hillary_egocentric)$name,V(hillary_egocentric)$id)
names(ultra_vlist) <- c( "name","id")
View(ultra_vlist)
f_count$ReceiverId <-as.character(fcount$ReceiverId)
email_no <- left_join(ultra_vlist,fcount,by=c("id"="ReceiverId"))
View(email_no)
email_no[is.na(email_no)] <- 0
V(hillary_egocentric)$n_emails <- email_no$`sum(count)`
V(hillary_egocentric)$n_emails
V(hillary_egocentric)$n_emails
V(hillary_egocentric)$n_emails <- email_no$`sum(count)`
V(hillary_egocentric)$n_emails
plot(hillary_egocentric,layout=layout.fruchterman.reingold(hillary_egocentric),
vertex.size = log(V(hillary_egocentric)$n_emails + 1),
vertex.label=NA,edge.arrow.size=.2)
as.numeric(V(hillary_egocentric)$n_emails )
plot(hillary_egocentric,layout=layout.fruchterman.reingold(hillary_egocentric),
vertex.size = log(V(hillary_egocentric)$n_emails + 1),
vertex.label=NA,edge.arrow.size=.2)
as.numeric(V(hillary_egocentric)$n_emails )
plot(hillary_egocentric,layout=layout.fruchterman.reingold(hillary_egocentric),
vertex.size = log(V(hillary_egocentric)$n_emails),
vertex.label=NA,edge.arrow.size=.2)
plot(hillary_egocentric,layout=layout.fruchterman.reingold(hillary_egocentric),
vertex.size = .3,
vertex.label=NA,edge.arrow.size=.2)
plot(hillary_egocentric,layout=layout.fruchterman.reingold(hillary_egocentric),
vertex.size = log(V(hillary_egocentric)$n_emails + 1) ,
vertex.label=NA,edge.arrow.size=.2)
betweenness_centrality <- betweenness(hillary_egocentric,normalized = TRUE)
betweenness_centrality
# Fit a regression model
lin_df <- data.frame(V(hillary_egocentric)$n_emails, betweenness_centrality)
names(lin_df) <- c("Emails", "Betweenness") # Rename columns
summary(lm(Emails ~ Betweenness, data = lin_df))
V(hillary_egocentric)$n_emails
plot(hillary_egocentric,layout=layout.fruchterman.reingold(hillary_egocentric),
vertex.size = log(V(hillary_egocentric)$n_emails + 1) ,
vertex.label=NA,edge.arrow.size=.2)
betweenness_centrality <- betweenness(hillary_egocentric,normalized = TRUE)
betweenness_centrality
# Fit a regression model
lin_df <- data.frame(V(hillary_egocentric)$n_emails, betweenness_centrality)
names(lin_df) <- c("Emails", "Betweenness") # Rename columns
summary(lm(Emails ~ Betweenness, data = lin_df))
betweenness_centrality <- betweenness(hillary_egocentric,normalized = TRUE)
betweenness_centrality
plot(hillary_egocentric,layout=layout.fruchterman.reingold(hillary_egocentric),
vertex.size = log(V(hillary_egocentric)$n_emails + 1) ,
vertex.label=NA,edge.arrow.size=.2)
plot(hillary_egocentric,layout=layout.fruchterman.reingold(hillary_egocentric),
vertex.size = log(V(hillary_egocentric)$n_emails + 1) ,
vertex.label=NA,edge.arrow.size=.2)
betweenness_centrality <- betweenness(hillary_egocentric,normalized = TRUE)
betweenness_centrality
# Fit a regression model
lin_df <- data.frame(V(hillary_egocentric)$n_emails, betweenness_centrality)
names(lin_df) <- c("Emails", "Betweenness") # Rename columns
summary(lm(Emails ~ Betweenness, data = lin_df))
V(hillary_egocentric)$n_emails
as.numeric(V(hillary_egocentric)$n_emails)
V(hillary_egocentric)$n_emails <- as.numeric(V(hillary_egocentric)$n_emails)
plot(hillary_egocentric,layout=layout.fruchterman.reingold(hillary_egocentric),
vertex.size = log(V(hillary_egocentric)$n_emails + 1) ,
vertex.label=NA,edge.arrow.size=.2)
betweenness_centrality <- betweenness(hillary_egocentric,normalized = TRUE)
betweenness_centrality
lin_df <- data.frame(V(hillary_egocentric)$n_emails, betweenness_centrality)
names(lin_df) <- c("Emails", "Betweenness") # Rename columns
summary(lm(Emails ~ Betweenness, data = lin_df))
